generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Collegiate {
  id        Int      @id @default(autoincrement())
  teacher   String
  segment   String
  email     String
  validity  String
  image     String?
  updatedAt DateTime
}

model CoursePurpose {
  id         Int      @id @default(autoincrement())
  title      String
  mission    String   @db.Text
  vision     String   @db.Text
  values     String   @db.Text
  principles String   @db.Text
  image      String?
  updatedAt  DateTime
}

model ProfissionalProfile {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.Text
  image     String?
  updatedAt DateTime
}

model Schedule {
  id        Int      @id @default(autoincrement())
  year      String
  semester  String
  link      String
  image     String?
  updatedAt DateTime
}

model TeachingCenter {
  id        Int      @id @default(autoincrement())
  teachers  String
  type      String
  email     String
  validity  String
  updatedAt DateTime
}

model ApliedGroup {
  id                String   @id @default(cuid())
  name              String
  notice            String
  developmentagency String
  value             String
  updatedAt         DateTime
}

model Equivalence {
  id            Int      @id @default(autoincrement())
  name          String
  ch            Int
  equivalence   String   @db.Text
  chequivalence Int
  updatedAt     DateTime
}

model CourseProgram {
  id          Int      @id @default(autoincrement())
  description String
  link        String
  updatedAt   DateTime
}

model ElectiveSubjects {
  id            Int      @id @default(autoincrement())
  name          String
  ch            Int
  credits       Int
  prerequisites String
  updatedAt     DateTime
}

model Tcc {
  id          Int      @id @default(autoincrement())
  title       String
  resume      String   @db.Text
  projectarea String
  studentname String
  link        String
  updatedAt   DateTime
}

model TypesOfPublications {
  id                  Int                   @id @default(autoincrement())
  name                String
  updatedAt           DateTime
  StudentPublications StudentPublications[]
}

model StudentPublications {
  id                  Int                 @id @default(autoincrement())
  typeOfPublicationId Int
  title               String
  resume              String              @db.Text
  author              String
  link                String
  linkName            String
  updatedAt           DateTime
  typeOfPublication   TypesOfPublications @relation(fields: [typeOfPublicationId], references: [id])

  @@index([typeOfPublicationId])
}

model Articles {
  id        Int      @id @default(autoincrement())
  title     String
  resume    String   @db.Text
  author    String
  link      String
  updatedAt DateTime
}

model Phase {
  id       Int       @id @default(autoincrement())
  name     String
  subjects Subject[]
}

model Subject {
  id            Int    @id @default(autoincrement())
  phaseId       Int
  name          String
  CH            Int
  Credits       Int
  Prerequisites String
  phase         Phase  @relation(fields: [phaseId], references: [id])

  @@index([phaseId])
}

model SchoolYear {
  id        Int      @id @default(autoincrement())
  teacherId Int
  classId   Int
  teachers  Teachers @relation(fields: [teacherId], references: [id])
  class     Class    @relation(fields: [classId], references: [id])

  @@index([teacherId])
  @@index([classId])
}

model Class {
  id         Int          @id @default(autoincrement())
  year       String
  semester   Int
  updatedAt  DateTime
  schoolYear SchoolYear[]
}

model Teachers {
  id            Int          @id @default(autoincrement())
  name          String       @unique
  qualification String
  area          String
  email         String
  lattes        String
  updatedAt     DateTime
  schoolYear    SchoolYear[]
}

model Card {
  id      Int       @id @default(autoincrement())
  name    String
  groupId Int
  locale  String
  info    String
  group   CardGroup @relation(fields: [groupId], references: [id])

  @@index([groupId])
}

model CardGroup {
  id    Int    @id @default(autoincrement())
  name  String
  cards Card[]
}

model ViewsPage {
  id        Int      @id @default(autoincrement())
  title     String   @unique(map: "title")
  content   String   @db.Text
  image     String?
  link      String?
  updatedAt DateTime
  nameLink  String?
}
